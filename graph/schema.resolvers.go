package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"context"
	"strconv"

	"github.com/TanyaEIEI/pokedex/common"
	"github.com/TanyaEIEI/pokedex/graph/model"
)

// CreatePokemon is the resolver for the createPokemon field.
func (r *mutationResolver) CreatePokemon(ctx context.Context, input model.CreatePokemon) (*model.Pokemon, error) {
	context := common.GetContext(ctx)
	var pokemonList []*model.Pokemon
	err := context.Database.Find(&pokemonList).Error
	if err != nil {
		return nil, err
	}
	var currentId int
	if len(pokemonList) == 0 {
		currentId = 0
	} else {
		currentId, _ = getCurrentId(pokemonList)
	}
	newPokenmon := &model.Pokemon{
		ID:          strconv.Itoa(currentId + 1),
		Name:        input.Name,
		Description: input.Description,
		CategoryID:  input.CategoryID,
		AbilityID:   input.AbilityID,
		TypeID:      input.TypeID,
	}
	err2 := context.Database.Create(&newPokenmon).Error
	if err2 != nil {
		return nil, err2
	}
	return r.Query().FindPokemonByID(ctx, newPokenmon.ID)
}

// UpdatePokemon is the resolver for the updatePokemon field.
func (r *mutationResolver) UpdatePokemon(ctx context.Context, input model.UpdatePokemon) (*model.Pokemon, error) {
	context := common.GetContext(ctx)
	pokemon := &model.Pokemon{
		ID:          input.ID,
		Name:        input.Name,
		Description: input.Description,
		TypeID:      input.TypeID,
		CategoryID:  input.CategoryID,
		AbilityID:   input.AbilityID,
	}
	err := context.Database.Save(&pokemon).Error
	if err != nil {
		return nil, err
	}
	return pokemon, err
}

// DeletePokemon is the resolver for the deletePokemon field.
func (r *mutationResolver) DeletePokemon(ctx context.Context, id string) (*bool, error) {
	context := common.GetContext(ctx)
	var pokemon *model.Pokemon
	err := context.Database.Where("id = ?", id).Delete(&pokemon).Error
	if err != nil {
		return nil, err
	}
	result := true
	return &result, nil
}

// CreateType is the resolver for the createType field.
func (r *mutationResolver) CreateType(ctx context.Context, input model.NewType) (*model.PokemonType, error) {
	context := common.GetContext(ctx)
	var typeList []*model.PokemonType
	err := context.Database.Find(&typeList).Error
	if err != nil {
		return nil, err
	}
	var currentId int
	if len(typeList) == 0 {
		currentId = 0
	} else {
		currentId, _ = getCurrentId(typeList)
	}
	newType := &model.PokemonType{
		ID:   strconv.Itoa(currentId + 1),
		Name: input.Name,
	}
	err2 := context.Database.Create(&newType).Error
	if err2 != nil {
		return nil, err2
	}
	return newType, nil
}

// CreateAbility is the resolver for the createAbility field.
func (r *mutationResolver) CreateAbility(ctx context.Context, input model.NewAbility) (*model.PokemonAbility, error) {
	context := common.GetContext(ctx)
	var abilityList []*model.PokemonAbility
	err := context.Database.Find(&abilityList).Error
	if err != nil {
		return nil, err
	}
	var currentId int
	if len(abilityList) == 0 {
		currentId = 0
	} else {
		currentId, _ = getCurrentId(abilityList)
	}
	newAbility := &model.PokemonAbility{
		ID:   strconv.Itoa(currentId + 1),
		Name: input.Name,
	}
	err2 := context.Database.Create(&newAbility).Error
	if err2 != nil {
		return nil, err2
	}
	return newAbility, nil
}

// CreateCategory is the resolver for the createCategory field.
func (r *mutationResolver) CreateCategory(ctx context.Context, input model.NewCategory) (*model.PokemonCategory, error) {
	context := common.GetContext(ctx)
	var categoryList []*model.PokemonCategory
	err := context.Database.Find(&categoryList).Error
	if err != nil {
		return nil, err
	}
	var currentId int
	if len(categoryList) == 0 {
		currentId = 0
	} else {
		currentId, _ = getCurrentId(categoryList)
	}
	newCategory := &model.PokemonCategory{
		ID:   strconv.Itoa(currentId + 1),
		Name: input.Name,
	}
	err2 := context.Database.Create(&newCategory).Error
	if err2 != nil {
		return nil, err2
	}
	return newCategory, nil
}

// ListPokemons is the resolver for the listPokemons field.
func (r *queryResolver) ListPokemons(ctx context.Context) ([]*model.Pokemon, error) {
	context := common.GetContext(ctx)
	var pokemonList []*model.Pokemon
	err := context.Database.Preload("Type").Preload("Category").Preload("Ability").Find(&pokemonList).Error
	if err != nil {
		return nil, err
	}
	return pokemonList, nil
}

// ListType is the resolver for the listType field.
func (r *queryResolver) ListType(ctx context.Context) ([]*model.PokemonType, error) {
	context := common.GetContext(ctx)
	var typeList []*model.PokemonType
	err := context.Database.Find(&typeList).Error
	if err != nil {
		return nil, err
	}
	return typeList, nil
}

// ListCategory is the resolver for the listCategory field.
func (r *queryResolver) ListCategory(ctx context.Context) ([]*model.PokemonCategory, error) {
	context := common.GetContext(ctx)
	var categoryList []*model.PokemonCategory
	err := context.Database.Find(&categoryList).Error
	if err != nil {
		return nil, err
	}
	return categoryList, nil
}

// ListAbility is the resolver for the listAbility field.
func (r *queryResolver) ListAbility(ctx context.Context) ([]*model.PokemonAbility, error) {
	context := common.GetContext(ctx)
	var abilityList []*model.PokemonAbility
	err := context.Database.Find(&abilityList).Error
	if err != nil {
		return nil, err
	}
	return abilityList, nil
}

// FindPokemonByID is the resolver for the findPokemonById field.
func (r *queryResolver) FindPokemonByID(ctx context.Context, id string) (*model.Pokemon, error) {
	context := common.GetContext(ctx)
	var pokemon *model.Pokemon
	err := context.Database.Preload("Type").Preload("Category").Preload("Ability").Where("id = ?", id).Find(&pokemon).Error //if cannot find pokemon return null % show error data not found
	if err != nil {
		return nil, err
	}
	return pokemon, nil
}

// FindPokemonByName is the resolver for the findPokemonByName field.
func (r *queryResolver) FindPokemonByName(ctx context.Context, name string) ([]*model.Pokemon, error) {
	context := common.GetContext(ctx)
	var pokemon []*model.Pokemon
	err := context.Database.Preload("Type").Preload("Category").Preload("Ability").Where("name LIKE ?", "%"+name+"%").Find(&pokemon).Error
	if err != nil {
		return nil, err
	}
	return pokemon, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
